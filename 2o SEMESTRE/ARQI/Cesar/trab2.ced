;
;
;******************************************************************************
;
;	Arquivo de Referência para o desenvolvimento do kernel.
;
;	Versão: 2022.2
;
;	Áreas de memória
;
;	0000 - 7FFF		_KERNEL
;					Área de Kernel para implementação dos alunos
;
;	0100 - 01FF		_VETTAB
;					Tabela com os vetores das funções do kernel
;					*** CUIDADO! Esse vetor está no meio da área de código ***
;
;	8000 - FF7F		_APP
;					Área onde será colocado o programa de aplicação.
;					Esse programa vai fazer o acesso aos periféricos e interrupções, através das funções do Kernel.
;
;	FF80 - FFBF 	_IOAREA16
;					Area de perifericos, acessada na base 16 bits
;
;	FFC0 - FFFF		_IOAREA08
;					Area de perifericos, acessada na base 8 bits
;					
;******************************************************************************


_KERNEL:	equ	h0000
_VETTAB:	equ	h0100
_RESET:		equ	_VETTAB+H0100
_APP:		equ	h8000
_IOAREA16:	equ	hFF80
_IOAREA08:	equ	hFFC0


;
;------------------------------------------------------------------------------
;	Área reservada para os periféricos
;------------------------------------------------------------------------------

; Acesso em 16 bits
		org		_IOAREA16
		daw		[31]
IVET:	dw		0			; Vetor de interrupção

; Acesso em 8 bits
		org		_IOAREA08
		dab		[23]
TIMDT:	db		0			; Registro de programação do timer
INTS:	db		0			; INTERRUPT STATUS: IP x x x . x x IPStec IPStim
INTE:	db		0			; INTERRUPT ENABLE: IE x x x . x x IEStec IEStim
TECST:	db		0			; Status do teclado
TECDT:	db		0			; Dado do teclado
VISOR:	dab		[36]			; Portas de acesso ao visor

;	
;------------------------------------------------------------------------------
;	Ponto de entrada do RESET do processador
;------------------------------------------------------------------------------
		org		_KERNEL
		jmp		_RESET

;
;------------------------------------------------------------------------------
;	Area do kernel com os vetores das funções do kernel
;------------------------------------------------------------------------------
		org		_VETTAB
		
		dw		kbhit			; WORD	kbhit()
		dw		getchar			; BYTE	getchar()
		dw		putchar			; void	putchar(BYTE c)
		dw		putmsg			; void	putmsg(BYTE *msg)
		dw		timer			; void	timer(WORD tempo, WORD callback)
		dw		volume			; WORD	volume()

		
;	
;------------------------------------------------------------------------------
;	Código de RESET (BOOT) do processador/interrupção
;------------------------------------------------------------------------------
		org		_RESET
; 1) Desabilitar o sistema de interrupções

		CLR		INTE
		
; 2) Inicializar o stack pointer (SP = R6)

		MOV		#_APP, R6

; 3) Inicializar as variáveis internas usadas pelo sistema de interrupções e periféricos (IVET, INTE, etc.)

		CLR		INTS
		CLR		TECDT
		MOV		#isr, IVET 

; 4) Inicializar as variáveis internas do kernel

		CLR		CURSOR
		CLR		TECLA
		CLR		TEMPO
		MOV		#7, CALLBACK
		CLR		VOLUME_TOTAL
		CLR		R0
		CLR		R1
		CLR		R2
		CLR		R3
		CLR		R4
		CLR		R5

; 5) Inicializar o teclado zerando o byte de estado (TECST, endereço 65498)

		CLR		TECST

; 6) Inicializar o timer

		MOV		#10, TIMDT

; 7) Limpar o visor

		JSR		R7, limpa_visor

; 8) Habilitar interrupções

		MOV		#130, INTE

; 9) Retornar para o programa de aplicação com um desvio para o endereço _APP da memória
		jmp		_APP

;		
;------------------------------------------------------------------------------
; WORD	kbhit()
;------------------------------------------------------------------------------
kbhit:
		CMP		TECLA, #0	; verifica se tem alguma coisa no buffer do teclado
		BEQ		tecla_vazia	
		CLR		R0		; se tiver uma tecla R0 retorna 0		
		JMP		fim_kbhit
tecla_vazia:
		MOV		#1, R0		; se nao tiver tecla R0 retorna 1
fim_kbhit:
		RTS		R7

;		
;------------------------------------------------------------------------------
; BYTE	getchar()
;------------------------------------------------------------------------------
getchar:
		TST		TECLA		; verifica se tem alguma coisa no buffer do teclado
		BEQ		getchar		; se nao tiver fica no loop ate que o usuario digite uma tecla
		MOV		TECLA, R0	; se tiver retorna a tecla em R0
		CLR		TECLA		; limpa o buffer
		RTS		R7

;		
;------------------------------------------------------------------------------
; void	putchar(BYTE c)
;------------------------------------------------------------------------------
putchar:
		CMP		R5, #H08	; verifica se a tecla digitada eh backspace
		BEQ		back_space
		CMP		R5, #H0D	; verifica se a tecla digitada eh carriage return
		BEQ		carriage_return 
		CMP		R5, #H0A	; verifica se a tecla digitada eh line feed
		BEQ		line_feed
		JMP		verifica_validade	; se nao for nenhuma tecla especial, verifica se esta dentro do espaco valido

char_valido:
		MOV		#VISOR, R2	; pega o endereco do visor
		ADD		CURSOR, R2	; adiciona a posicao do cursor
		MOV		R5, (R2)	; coloca a tecla digitada no visor na posicao do cursor
		INC		CURSOR		; passa o cursor para a proxima posicao

fim_putchar:
		RTS		R7

back_space:
		CMP		CURSOR, #0	; verifica se o cursor ja esta no inicio do visor 
		BEQ		fim_putchar
		DEC		CURSOR		; se nao, coloca o cursor para tras
		JMP		fim_putchar

carriage_return:
		CLR		CURSOR		; coloca o cursor no inicio do visor
		JMP		fim_putchar

line_feed:
		JSR		R7, limpa_carac	; line feed limpa o visor
		JMP		fim_putchar

verifica_validade:
		CMP		R5, #H20	
		BLT		fim_putchar	; se for um valor menor que H20 nao eh valido
		CMP		R5, #H7A	
		BGT		fim_putchar	; se for um valor maior que H7A nao eh valido
		CMP		CURSOR, #32	; verifica se o cursor chegou no final
		BEQ		fim_putchar
		JMP		char_valido	; se nao parou em nenhuma das condicoes, entao a tecla eh valida

;		
;------------------------------------------------------------------------------
; void	putmsg(BYTE *msg)
;------------------------------------------------------------------------------
putmsg:
		DEC		R5
		MOV		R5, R4		; passa R5 para R4 pq vai precisar usar em cada caracter no putchar
loop_msg:
		MOV		(R4), R5	; passa o primeiro caracter para R5
		AND		#H00FF, R5	; verifica se chegou no final da string
		TST		R5
		BEQ		fim_putmsg
		JSR		R7, putchar	; coloca o caracter no visor com putchar
		INC		R4		; passa para o proximo caracter
		JMP		loop_msg	
fim_putmsg:
		RTS		R7

;		
;------------------------------------------------------------------------------
; void	timer(WORD tempo, WORD callback)
;------------------------------------------------------------------------------
timer:
		CLR		INTE
		MOV		R4, CALLBACK	; passa o endereco de callback de R4 para um buffer
		MOV		R5, TEMPO	; passa o tempo de R5 para um buffer
		MOV		#131, INTE	; liga a interrupcao de tempo
		RTS		R7
				
;		
;------------------------------------------------------------------------------
; WORD	volume()
;------------------------------------------------------------------------------
volume:
		CLR		R0
		CMP		VOLUME_TOTAL, #0	; nao tem nada no volume
		BEQ		fim_volume
		MOV		VOLUME_TOTAL, R0	; coloca o valor de volume em R0
fim_volume:
		RTS		R7

;
;*****************************************************************************
;------------------------------------------------------------------------------
;	Funções internas do kernel
;------------------------------------------------------------------------------
limpa_visor:
		JSR		R7, limpa_carac
		INC 		R2		; coloca o espaco em branco entre caracteres e volume
limpa_volume:
		MOV 		#H30, (R2)	; parte de volume completa com "0"
		INC 		R2
		BNE		limpa_volume	; limpa ate chegar no final do visor
		RTS		R7

limpa_carac:
		MOV 		#VISOR, R2
loop_carc:
		MOV 		#H20, (R2)	; parte de caracteres completa com " "
		INC 		R2
		CMP		R2, #65531	; verifica se chegou no final da parte de caracteres
		BLS 		loop_carc	; limpa ate chegar no final da parte de caracteres
		RTS		R7

;
;*****************************************************************************
;------------------------------------------------------------------------------
;	Funções para tratamento de interrupções
;------------------------------------------------------------------------------
isr:
		MOV 		R0, -(R6)	; salva registradores
		MOV 		R1, -(R6)
		MOV 		R2, -(R6)
		MOV 		R3, -(R6)
		MOV 		R4, -(R6)
		MOV 		R5, -(R6)
		MOV 		INTS, R3
		AND 		#2, R3			; verifica se foi o teclado que foi acionado
		BEQ 		checar_timer		; se nao, verifica o timer 
		JSR 		R7, interrup_tec	
		AND		#65533,INTS		; desliga a interrupcao de teclado

checar_timer:
		MOV 		INTS, R3
		AND 		#1, R3			; verifica se foi o timer que foi acionado
		BEQ 		fim_isr
		JSR 		R7, interrup_tim
		AND		#65534,INTS		; desliga a interrupcao de timer

fim_isr:
		MOV 		(R6)+, R0		; retira os registradores da pilha
		MOV 		(R6)+, R1
		MOV 		(R6)+, R2
		MOV 		(R6)+, R3
		MOV 		(R6)+, R4
		MOV 		(R6)+, R5
		RTI

;------------------------------------------------------------------------------
interrup_tec:
		CMP		TECST, #0
		BEQ		fim_itrp_tec
		MOV 		#VISOR, R2
		MOV		TECDT, R0
		CMP		R0, #H2B		; se for "+" precisa aumentar volume
		BEQ		aumenta_volume_1
		CMP		R0, #H2D		; se for "-" precisa diminuir volume
		BEQ		diminui_volume_1
		CMP		R0, #H2E		; se for "." precisa aumentar volume
		BEQ		aumenta_volume_10
		CMP		R0, #H2C		; se for "," precisa diminuir volume
		BEQ		diminui_volume_10
		CMP		R0, #H3E		; se for ">" precisa aumentar volume
		BEQ		aumenta_volume_100
		CMP		R0, #H3C		; se for "<" precisa diminuir volume
		BEQ		diminui_volume_100
		MOV		R0, TECLA		; se nao for tecla de volume entao salva no buffer
		JMP		fim_itrp_tec

aumenta_volume_1:
		INC		VOLUME_TOTAL		; incrementa a variavel de volume total em uma unidade
		ADD		#35, R2
		CMP		(R2), #H39		; verifica se a casa decimal chegou em 9 (overflow)
		BEQ		trata_carry_dec
incrementa:
		INC 		(R2)
		JMP		fim_itrp_tec

aumenta_volume_10:
		ADD		#10, VOLUME_TOTAL	; incrementa a variavel de volume total em dez unidades
		ADD		#34, R2
		CMP		(R2), #H39		; verifica se a casa de dezena chegou em 9 (overflow)
		BEQ		trata_carry_dez
		JMP		incrementa

aumenta_volume_100:
		ADD		#100, VOLUME_TOTAL	; incrementa a variavel de volume total em cem unidades
		ADD		#33, R2
		CMP		(R2), #H39		; verifica se a casa de centena chegou em 9 (fim)
		BEQ		fim_itrp_tec
		JMP		incrementa

fim_itrp_tec:
		CLR		TECST
		RTS 		R7

diminui_volume_1:
		ADD		#35, R2
		CMP		(R2), #H30		; verifica se a casa decimal ja esta em zero
		BEQ		compara_zero_dec	
		DEC		VOLUME_TOTAL		; se nao for zero, decrementa a variavel de volume total em uma unidade
decrementa:
		DEC		(R2)
		JMP		fim_itrp_tec

diminui_volume_10:
		ADD		#34, R2
		CMP		(R2), #H30		; verifica se a casa de dezena ja esta em zero
		BEQ		compara_zero_dez	
		SUB		#10, VOLUME_TOTAL	; se nao for zero, decrementa a variavel de volume total em dez unidades
		JMP		decrementa

diminui_volume_100:
		ADD		#33, R2
		CMP		(R2), #H30		; verifica se a casa de centena ja esta em zero
		BEQ		fim_itrp_tec
		SUB		#100, VOLUME_TOTAL	; se nao for zero, decrementa a variavel de volume total em cem unidades
		JMP		decrementa

trata_carry_dec:					; lida com o overflow da casa decimal
		MOV 		#VISOR, R2
		CMP		34(R2), #H39		; verifica se a dezena tambem tem nove
		BEQ		trata_carry_dez
		INC		34(R2)			; se nao, aumenta a dezena
		MOV		#H30, 35(R2)		; zera o decimal
		JMP		fim_tratamento
trata_carry_dez:					; lida com o overflow da casa de dezena
		MOV 		#VISOR, R2
		CMP		33(R2), #H39		; verifica se a centena tambem tem nove
		BEQ		fim_tratamento		; se sim, chegou no valor maximo e nao pode aumentar
		INC		33(R2)			; se nao, aumenta a centena
		MOV		#H30, 34(R2)		; zera a dezena
fim_tratamento:
		JMP		fim_itrp_tec

compara_zero_dec:
		MOV 		#VISOR, R2
		CMP		34(R2), #H30
		BEQ		compara_zero_dez	; verifica se a dezena tambem possui zero
		DEC		34(R2)			; se nao, diminui a dezena
		MOV		#H39, 35(R2)		; coloca nove na casa decimal
		JMP		fim_tratamento
compara_zero_dez:
		MOV 		#VISOR, R2
		CMP		33(R2), #H30		; verifica se a centena tambem possui zero
		BEQ		fim_tratamento		; se sim, entao o volume esta zerado e nao pode diminuir
		DEC		33(R2)			; se nao, diminui a centena
		MOV		#H39, 34(R2)		; coloca nove na dezena
		JMP		fim_tratamento

;------------------------------------------------------------------------------
interrup_tim:
		CMP		CALLBACK, #7	; verifica tem foi colocada alguma coisa no callback
		BEQ		fim_itrp_tim
		TST		TEMPO		; verifica se o tempo esta vazio
		BEQ		fim_itrp_tim
		SUB		#100, TEMPO	; se tiver alguma coisa no tempo entao tira 100ms (10ms * 100ms = 1s)
		BLE		chama_callback	; se for menor ou igual a zero acabou o tempo, precisa chamar o callback
		JMP		fim_itrp_tim

chama_callback:
		CLR		INTE
		MOV		CALLBACK, R3	
		JSR		R7, (R3)	; vai para o endereco da funcao de callback
		MOV		#7, CALLBACK	; limpa o callback
		CLR		TEMPO		; limpa o timer
		MOV		#130, INTE	; desliga a interrupcao de timer

fim_itrp_tim:
		RTS 		R7

;
;*****************************************************************************
;------------------------------------------------------------------------------
;	Variáveis internas do kernel
;------------------------------------------------------------------------------	
CURSOR: 	dw 0	; variavel para determinar a posicao do cursor no visor
TECLA:		dw 0	; buffer para as teclas digitadas durante a interrupcao
TEMPO:		dw 0	; buffer para o tempo indicado pelo usuario para ligar o timer
CALLBACK:	dw 0	; buffer para o endereco da funcao de callback conforme indicado pelo usuario
VOLUME_TOTAL:	dw 0	; variavel para calcular o volume total digitado

